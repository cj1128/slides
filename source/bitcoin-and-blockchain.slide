Bitcoin and Blockchain
26 Mar 2018
.cover http://ww1.sinaimg.cn/large/9b85365dgy1fpmnq8rk59j20e80e8jr9

CJ Ting

* 基础知识

* 哈希算法

也叫摘要算法，计算 *任意长度* 输入的摘要，产生一个 *固定长度* 的输出，这个输出叫做 *哈希值*。

常见的哈希算法有 `MD5`, `SHA256`, `SHA512` 等。

特点：

- 无冲突：无法找到两个不一样的输入，产生同样的哈希值，注意，是无法找到
- 不可逆：无法由输出推导输入

* 数字签名

数字签名和我们传统的签名一样，满足两个性质：

- 只有特定的人可以签，但是所有人都可以验证
- 签名和特定的内容绑定在一起，剪切复制是没用的

目前使用的数字签名一般由 *非对称秘钥* 实现，有两把钥匙，一把秘钥，一把公钥，公钥公之于众。

- 消息发布者可以使用 `秘钥`+`消息` 产生签名
- 其他人可以使用 `公钥`+`消息`+`签名` 来验证有效性

* 身份认证

* ECDSA 认证系统

_SK_(Secret_Key,_秘钥)_:

`f46b86f8d9b7d7008b6a7f940ba782663e2f06eccea272a375ee49d74ec1e9f8`

_WA_(Wallet_Address,_钱包地址)_:

`02ab20170e07d7f701ce7c4e5fa30bac0841c0aab6a448c7ee848af3b1a7e1cb7f18SGifBJgDWnARXaHUmM8E3FJAHnLcxZhW`

- SK -> WA: 使用 SK 可以生成 WA，这个过程不可逆 `dingxijin`
- SK 和 WA 构成了非对称秘钥系统，即 SK 签名，WA 可以验证
- 持有比特币的唯一方式为：*持有比特币*WA*对应的*SK*

* Q: SK 是怎样生成的呢？有什么条件吗?

* A: 没有任何条件，使用计算机随机生成就行。

* 点对点网络

* 点对点，去中心

- *任何计算机* 都可以下载运行比特币程序，从而成为比特币网络中的一个节点。

- 去中心意味着整个系统中没有中心节点，*所有节点都是平等的*。

- 每个节点拥有比特币的完整数据，因此，*破坏比特币的唯一方式是摧毁所有的节点*。

* Q: 为什么大家会愿意成为比特币的节点？

* A: 因为成为节点参与挖矿，可以获得比特币的奖励。

* 交易

* 交易流程

- 钱包（一个软件）构造一条交易
- 向节点发送交易
- 节点验证交易有效性
- 向其他节点广播该交易
- 交易被存储进区块中

* 交易结构

交易由两部分构成，输入相当于汇款方，输出相当于收款方。

输入，可能有多个

- `UTXO(Unspent`Transaction`Output)`: 某一个交易的输出
- `解锁脚本`: 用来解锁上述的 UTXO

输出，可能有多个

- `锁定脚本`: 指定了消费这段输出的条件
- `金额`

* 锁定脚本和解锁脚本

锁定脚本和解锁脚本是一套小型的编程语言，为什么不设计成直接校验签名而要弄一套脚本系统？

因为脚本可以用来指定复杂的消费校验方式。

比特币中绝大部分交易，消费校验都是提供 WA 对应的签名即可。

- 锁定脚本中的内容：WA

- 解锁脚本：签名（消息为交易哈希值）

节点使用 _WA_+_签名_+_消息_（交易哈希值）_ 即可确认解锁脚本是否有效。

* Q: 消费校验还有哪些可能的方式？

* A: 联合账户，比如必须提供三个人中两个人的签名。

* 交易图解

.image bitcoin-and-blockchain/transaction.svg

* Q: 输入金额一定等于输出金额吗？

* A: 不一定，之间的差额就是手续费。

* Q: 交易有效性需要检查哪些点？

* A: UTXO 没有被消费，解锁脚本和锁定脚本匹配，输入金额需要大于输出金额。

* Q: 如何知道一个 WA 的余额是多少？

* A: 根据交易推导

比特币没有直接的账户余额，一个 WA 对应的余额需要使用目前所有的交易推导出来。

交易之间形成一个链条，每一笔交易都能追根溯源。如果你要转钱给别人，一定是有人先转钱给你。

* Q: 最初的钱怎么来的？

* A: 这就是著名的“挖矿”。

* 产生

* 区块

_挖矿_：节点将交易打包在一起，形成区块的过程。

一个区块由以下部分构成：

- 多个交易记录
- 父区块的哈希值
- 困难度(一个数字)
- 时间戳
- 随机数

由于每个区块都含有上个区块的哈希值，因此，区块之间形成一个链条，也就是所谓的 _区块链_。

* Q: 第一个区块的父区块是什么呢？

* A: 这个区块叫做创世区块，它的内容硬编码在软件当中。

* Q: 挖矿时如何选择包含哪些交易？

* A: 存在一个优先级算法

算法会考虑如下因素

- 交易的价值
- UTXO 所在区块距顶端的长度
- 交易数据量大小
- 交易手续费

* Q: 困难度是个什么东西？用来做什么？

* A: 这就涉及到比特币达成共识的核心设计，POW，工作量证明。

* POW, Proof of Work

每个节点都可以形成区块，但是形成区块必须满足特定的条件：*区块的哈希值（当做整数来解读）必须小于困难度。*

由于哈希算法的特性，*找到吻合条件哈希值的唯一做法是尝试*。尝试的过程就是不停地修改随机数，计算哈希值，检验哈希值是否吻合条件。

一旦某个节点找到了特定的随机数使得哈希值满足条件，也就是所谓的“挖到了矿”，那么这个区块就会被加入到链中，同时广播给网络中其他节点，其他节点收到消息后，校验区块的有效性，然后立刻开始“挖下一个矿”。

* Q: 困难度是一个固定的数字吗？

* A: 不是。

* Q: 为什么？

* A: 因为计算能力在增加，如果困难度是一个固定的数字，比特币就会越挖越快，导致价值下跌以及系统不稳定。

* Q: 作为一个分布式系统，比特币如何调整困难度？

* A: 根据时间来调整

算法很简单，每 2016 个区块以后，节点会根据生成 2016 个区块的实际时间以及理论时间（每 10 分钟一个区块），调整困难度，因此，*无论网络节点多少，无论计算能力大小，比特币始终保持在*10*分钟一个区块*。

* Q: 比特币的交易速度是多少？每分钟可以完成多少笔交易？

* A: 区块中包含的交易数量 / 10分钟

区块中的交易数量平均值在 2000 左右，因此比特币的交易速率平均为 _200笔_/_分钟_，作为一个全球货币，这个交易速度非常低，是比特币的一个重大缺陷。

* 生成交易

每个区块的第一个交易是 *生成交易(Generation*Transaction)*。这个交易 *没有输入，只有输出*。

生成交易将 *系统奖励*+*手续费* 输出到挖矿人员设定的钱包地址，这就是比特币产生的根源。

* Q: 挖矿需要消耗什么资源？

* A: 一次性投资的硬件 + 维持硬件运作的电力

* Q: 同时有多台节点挖到矿怎么处理？

* A: 这就是所谓的“分叉”，节点会维护分叉的链，直到下一个区块到来。

.image bitcoin-and-blockchain/fork.svg 500 _

* Q: 分叉会造成怎样的影响？

* A: 分叉会修改区块链，导致交易无效，比如著名的 51% 攻击。

* 51% Attack(1)

考虑这样一个情景：A与B之间有一笔大额交易，使用比特币支付。

交易为 T1， B 在等到交易进入区块 B2 以后，就交付货品给 A。

此时，A 立刻调用大量计算能力，在 B1 的基础上重新挖矿得到 B3，B3 中有一笔交易 T2，使用和 T1 同样的 UTXO，但是输出为 A 自己的账户。

紧接着在 B3 的基础上挖出 B4（A 掌握了 51% 的计算能力），那么 B2 就会彻底作废。A 同时拿到了钱和货。

* 51% Attack(2)

.image bitcoin-and-blockchain/attack.svg

* Q: T1 为何无效了？

* A: 节点收到 T1 后，会发现它的 UTXO 已经被支付，因此判定 T1 无效。

* Q: 如何防范此类攻击？

* A: 非常简单，等到确认度增加以后再进行交付

*确认度* 指的是交易所在的区块前面还有多少区块（包含该区块），确认度越高，链条越长，越无法修改，越安全。

一般 10 以上就十分安全了，要推翻 10 个区块需要巨大的计算量，目前没有个体和团体能做到，这个方法的缺点是需要等待。

* Q: 确认度为 0 的交易安全吗？也就是交易还没有被挖进区块中。

* A: 当然不安全

这个交易可以被轻松撤销，只适用于非常小额的交易，比如买一杯咖啡。

假设交易为 `A`->`B(T1)`，因为交易没有被挖进区块中，A 可以再构造一个交易，`A`->`A(T2)`，如果 T2 先进入区块(通过增加手续费的方式)，那么 T1 就会无效。

* 总结

到了这里，我想大家应该对比特币的整个系统运作有了一定的理解。

- 比特币怎么产生？
- 怎样交易？
- 怎样持有？
- 有什么优点？
- 有什么缺点？
- 它底层的区块链技术有什么特点？

_注意，这次分享意在说明比特币的工作原理，希望能帮助大家站在一个整体的角度上去理解比特币，重在概念性解释，因此部分技术细节做了调整方便大家理解，不一定准确。_
